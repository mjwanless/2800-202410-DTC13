<%- include('templates/header'); %>
<%- include('templates/backBtn'); %>

<div class="bg-orange-50 min-h-screen py-10">
    <div class="bg-orange-50 p-8 rounded shadow-md w-full max-w-lg mx-auto">
        <h3 class="text-2xl font-bold mb-5 text-blue-950">Edit Your Preferences</h3>
        <div class="mb-4">
            <input type="text" id="preferenceInput" class="p-2 border rounded w-full" placeholder="Enter a preference">
        </div>
        <div class="mb-4 flex justify-center">
            <button onclick="addPreference()" class="bg-blue-500 text-white px-3 py-1 rounded">Add</button>
        </div>
        <div id="preferenceList" class="flex flex-wrap gap-2 mb-4">
            <% if (user.preferences && user.preferences.length > 0) { %>
                <% user.preferences.forEach(function(pref) { %>
                    <div class="relative bg-indigo-50 text-blue-950 px-3 py-1 rounded-full preference-bubble" data-name="<%= pref %>">
                        <%= pref %>
                    </div>
                <% }) %>
            <% } %>
        </div>
        <div class="mt-4 flex justify-center space-x-14">
            <button onclick="deleteSelectedPreferences()" class="bg-gray-500 text-white px-4 py-1 rounded">Delete</button>
            <button onclick="savePreferences()" class="bg-orange-500 text-white px-4 py-1 rounded">Comfirm</button>
        </div>
    </div>
</div>

<!-- Menubar -->
<%- include('templates/menuBar'); %>
<%- include('templates/footer'); %>

<script>
    let preferences = [];
    let selectedPreferences = [];

    document.addEventListener('DOMContentLoaded', () => {
        // Initialize preferences from server-rendered data
        const prefElements = document.querySelectorAll('.preference-bubble');
        prefElements.forEach(element => {
            preferences.push(element.getAttribute('data-name').trim());
            element.addEventListener('click', () => toggleSelection(element));
        });
    });

    function addPreference() {
        const input = document.getElementById('preferenceInput');
        const value = input.value.trim();
        if (value && !preferences.includes(value)) {
            preferences.push(value);
            updatePreferenceList();
            input.value = '';
        }
    }

    function toggleSelection(element) {
        const preference = element.getAttribute('data-name');
        if (selectedPreferences.includes(preference)) {
            selectedPreferences = selectedPreferences.filter(p => p !== preference);
            element.classList.remove('selected');
        } else {
            selectedPreferences.push(preference);
            element.classList.add('selected');
        }
    }

    function deleteSelectedPreferences() {
        if (confirm(`Are you sure you want to delete the selected preferences?`)) {
            preferences = preferences.filter(p => !selectedPreferences.includes(p));
            selectedPreferences = [];
            updatePreferenceList();
        }
    }

    function updatePreferenceList() {
        const list = document.getElementById('preferenceList');
        list.innerHTML = '';
        preferences.forEach(pref => {
            const chip = document.createElement('div');
            chip.className = 'relative bg-indigo-50 text-blue-950 px-3 py-1 rounded-full preference-bubble';
            chip.dataset.name = pref;
            chip.textContent = pref;
            chip.addEventListener('click', () => toggleSelection(chip));
            list.appendChild(chip);
        });
    }

    function savePreferences() {
        axios.post('/save_preferences', { preferences })
            .then(response => {
                window.location.href = '/user_account';
            })
            .catch(error => {
                console.error('Error saving preferences:', error);
            });
    }
</script>

<style>
    .preference-bubble {
        transition: transform 0.3s, background-color 0.3s, border-color 0.3s;
        position: relative;
        cursor: pointer;
    }
    .preference-bubble:hover {
        transform: scale(1.1);
    }
    .preference-bubble.selected {
        background-color: rgba(7, 172, 183, 0.8); /* Darker transparent orange when selected */
    }
</style>
